?sample
x_3 = sample(c("none", "infraction", "misdimeanor", "felony"), n)
#TO-DO
n = 100
x_3 = sample(c("none", "infraction", "misdimeanor", "felony"), n)
#TO-DO
n = 100
x_3 = sample(c("none", "infraction", "misdimeanor", "felony"), n, replace=FALSE)
x_3 = sample(c("none", "infraction", "misdemeanor", "felony"), n, replace=FALSE)
x_3 = sample(c("none", "infraction", "misdemeanor", "felony"), sice=n, replace=TRUE)
#TO-DO
n = 100
x_3 = sample(c("none", "infraction", "misdemeanor", "felony"), sice=n, replace=TRUE)
#TO-DO
n = 100
x_3 = sample(c("none", "infraction", "misdemeanor", "felony"), size=n, replace=TRUE)
x_3
as.factor(x_3)
#TO-DO
n = 100
x_3 = as.factor(sample(c("none", "infraction", "misdemeanor", "felony"), size=n, replace=TRUE))
x_3
#TO-DO
x_3[x == "none", 0, 1]
#TO-DO
x_3[x_3 == "none", 0, 1]
#TO-DO
x_3_bin = ifelse(x_3 =="none", 0, 1)
x_3_bin
#TO-DO
x_3_ord = sort(x_3)
x_3_ord
?factor
#TO-DO
x_3_ord = is.ordered(x_3)
x_3_ord
#TO-DO
x_3_ord = ordered(x_3)
x_3_ord
#TO-DO
x_3_ord = factor(x_3, ordered = TRUE)
x_3_ord
#TO-DO
x_3_ord = factor(x_3, ordered = TRUE, levels=c("none", "infraction", "misdemeanor", "felony"))
x_3_ord
?matrix
x_3_ord == "infraction")
?cbind
#TO-DO
vec1 = ifelse(x_3_ord == "infraction", 1, 0)
vec2 = ifelse(x_3_ord == "misdemeanor", 1, 0)
vec3 = ifelse(x_3_ord == "felony", 1, 0)
X = cbind(vec1,vec2,vec3)
X
?colnames
#TO-DO
X = cbind(ifelse(x_3_ord == "infraction", 1, 0), ifelse(x_3_ord == "misdemeanor", 1, 0), ifelse(x_3_ord == "felony", 1, 0))
colnames(X, c("infraction", "misdemeanor", "felony"))
colnames(X) = c("infraction", "misdemeanor", "felony")
X
#TO-DO
#Column sums should be counts of crime level in the data
colSum(X)
#TO-DO
#Column sums should be counts of crime level in the data
colSums(X)
sample(c(rep(1, round(n*0.24)), rep(0, round(n*0.76))))
#TO-DO
X = cbind(
rnorm(n, 17, sqrt(38)),
runif(n, -10, 10),
rpois(n, 6),
rexp(n, 9),
rbinom(n, 20, 0.12),
sample(c(rep(1, round(n*0.24)), rep(0, round(n*0.76))))
)
X
rownames(X) = fake_first_names
fake_first_names = c(
"Sophia", "Emma", "Olivia", "Ava", "Mia", "Isabella", "Riley",
"Aria", "Zoe", "Charlotte", "Lily", "Layla", "Amelia", "Emily",
"Madelyn", "Aubrey", "Adalyn", "Madison", "Chloe", "Harper",
"Abigail", "Aaliyah", "Avery", "Evelyn", "Kaylee", "Ella", "Ellie",
"Scarlett", "Arianna", "Hailey", "Nora", "Addison", "Brooklyn",
"Hannah", "Mila", "Leah", "Elizabeth", "Sarah", "Eliana", "Mackenzie",
"Peyton", "Maria", "Grace", "Adeline", "Elena", "Anna", "Victoria",
"Camilla", "Lillian", "Natalie", "Jackson", "Aiden", "Lucas",
"Liam", "Noah", "Ethan", "Mason", "Caden", "Oliver", "Elijah",
"Grayson", "Jacob", "Michael", "Benjamin", "Carter", "James",
"Jayden", "Logan", "Alexander", "Caleb", "Ryan", "Luke", "Daniel",
"Jack", "William", "Owen", "Gabriel", "Matthew", "Connor", "Jayce",
"Isaac", "Sebastian", "Henry", "Muhammad", "Cameron", "Wyatt",
"Dylan", "Nathan", "Nicholas", "Julian", "Eli", "Levi", "Isaiah",
"Landon", "David", "Christian", "Andrew", "Brayden", "John",
"Lincoln"
)
#TO-DO
X = cbind(
rnorm(n, 17, sqrt(38)),
runif(n, -10, 10),
rpois(n, 6),
rexp(n, 9),
rbinom(n, 20, 0.12),
sample(c(rep(1, round(n*0.24)), rep(0, round(n*0.76))))
)
rownames(X) = fake_first_names
X
??data frame
??dataframe
??frame
#TO-DO
answer = data.frame(
normie = rnorm(n, 17, sqrt(38)),
eunice = runif(n, -10, 10),
fish = rpois(n, 6),
xp = rexp(n, 9),
nomie = rbinom(n, 20, 0.12),
sample(c(rep("DOMESTIC", round(n*0.24)), rep("FOREGIN", round(n*0.76))))
)
answer
rownames(answer) = fake_first_names
answer
#TO-DO
answer = data.frame(
normie = rnorm(n, 17, sqrt(38)),
eunice = runif(n, -10, 10),
fish = rpois(n, 6),
xp = rexp(n, 9),
nomie = rbinom(n, 20, 0.12),
origin = sample(c(rep("DOMESTIC", round(n*0.24)), rep("FOREGIN", round(n*0.76))))
)
rownames(answer) = fake_first_names
answer
??table
?table
#TO-DO
table(answer$origin)
??proportions
#TO-DO
prop.table(answer$origin)
#TO-DO
prop.table(answer$origin)
#TO-DO
i = table(answer$origin)
prop.table(i)
proportions(answer$origin)
proportions(i)
proportions(i)
??summary
#TO-DO
summary(i)
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere varius volutpat. Morbi faucibus ligula id massa ultricies viverra. Donec vehicula sagittis nisi non semper. Donec at tempor erat. Integer dapibus mi lectus, eu posuere arcu ultricies in. Cras suscipit id nibh lacinia elementum. Curabitur est augue, congue eget quam in, scelerisque semper magna. Aenean nulla ante, iaculis sed vehicula ac, finibus vel arcu. Mauris at sodales augue. "
shuffler = paste(sample(unlist(strsplit(lorem, split = ". ", fixed = TRUE))), collapse = ". ")
#TO-DO
rm(list = ls())
#' Perception Learning Algorithm
#'
#' Returns a vector that represents a hyper-plane that linearly separates the binary response in the input space.
#'
#' @param Xinput      n X p matrix of the training data of the characteristics of the training data
#' @param y_binary    An n length vector of the binary responses
#' @param MAX_ITER    Max iterations to do before stopping in this algorithm
#' @param w_0         p + 1 length vector that is the initial state
#'
#' @return            The computed final parameter (weight) as a vector of length p + 1
perceptron_learning_algorithm = function(Xinput, y_binary, MAX_ITER = 1000, w_0 = NULL){
p = ncol(Xinput)
n = nrow(Xinput)
Xinput = cbind(1, Xinput)
if (is.null(w_0)){
w_0 = rep(0, p + 1)
}
w_prev = w_0
w = w_0
for(iter in 1 : MAX_ITER){
for (i in 1 : n) {
y_hat_i = ifelse(sum(w_prev * Xinput[i,]) >= 0, 1, 0)
w = w + (y_binary[i] - y_hat_i) * Xinput[i,]
}
if(identical(w, w_prev)){
break
}
w_prev = w
}
w
}
Xy_simple = data.frame(
response = factor(c(0, 0, 0, 1, 1, 1)), #nominal
first_feature = c(1, 1, 2, 3, 3, 4),    #continuous
second_feature = c(1, 2, 1, 3, 4, 3)    #continuous
)
pacman::p_load(ggplot2)
simple_viz_obj = ggplot(Xy_simple, aes(x = first_feature, y = second_feature, color = response)) +
geom_point(size = 5)
simple_viz_obj
w_vec_simple_per = perceptron_learning_algorithm(
cbind(Xy_simple$first_feature, Xy_simple$second_feature),
as.numeric(Xy_simple$response == 1))
w_vec_simple_per
simple_perceptron_line = geom_abline(
intercept = -w_vec_simple_per[1] / w_vec_simple_per[3],
slope = -w_vec_simple_per[2] / w_vec_simple_per[3],
color = "orange")
simple_viz_obj + simple_perceptron_line
pacman::p_load(ggplot2)
Xy_simple = data.frame(
response = factor(c(0, 0, 0, 1, 1, 1)), #nominal
first_feature = c(1, 1, 2, 3, 3, 4),    #continuous
second_feature = c(1, 2, 1, 3, 4, 3)    #continuous
)
simple_viz_obj = ggplot(Xy_simple, aes(x = first_feature, y = second_feature, color = response)) +
geom_point(size = 5)
simple_viz_obj
pacman::p_load(e1071)
svm_model = svm(
formula = response ~ .,
data = Xy_simple,
kernel = "linear",
scale = FALSE
)
w_vec_simple_svm = c(
svm_model$rho, #the b term
-t(svm_model$coefs) %*% cbind(Xy_simple$first_feature, Xy_simple$second_feature)[svm_model$index, ] # the other terms
)
simple_svm_line = geom_abline(
intercept = -w_vec_simple_svm[1] / w_vec_simple_svm[3],
slope = -w_vec_simple_svm[2] / w_vec_simple_svm[3],
color = "purple")
simple_viz_obj + simple_svm_line
w_vec_simple_per = perceptron_learning_algorithm(
cbind(Xy_simple$first_feature, Xy_simple$second_feature),
as.numeric(Xy_simple$response == 1)
)
simple_perceptron_line = geom_abline(
intercept = -w_vec_simple_per[1] / w_vec_simple_per[3],
slope = -w_vec_simple_per[2] / w_vec_simple_per[3],
color = "orange")
simple_viz_obj + simple_perceptron_line + simple_svm_line
#' Nearest Neighbor Model
#'
#' It classifies its predictions using its nearest neighbor in the input space.
#'
#'
#' @param Xinput      Historical Measurements
#' @param y_binary    Historical responses
#' @param Xtest       A matrix of measurements where each row is a unit you wish to predict the response for
#' @param d           distance function to measure distances between two observations. which defaults to euclidian distance
#' @return            A vector of predicted responses
nn_algorithm_predict = function(Xinput, y_binary, Xtest, d=function(v_1, v_2){sum((v_1 - v_2)^2)}){
y_hat = array(NA, nrow(Xtest))
for (i_star in 1:nrow(Xtest)){
dsq = array(NA, nrow(Xinput)) # dsquared
for (i in 1:nrow(Xinput)){
dsq[i] = d(Xinput[i,], Xtest[i_star,]) # runs distance on two vectors
}
y_hat[i_star] = y_binary[which.min(dsq)]
}
y_hat
}
expected_predictions = c(0, 0)
predictions = nn_algorithm_predict(matrix(c(1, 1, 2, 2, 3, 3), ncol=2), c(0, 1, 0), matrix(c(1.5, 1.5, 2.5, 2.5), ncol=2))
test_result = all(predictions == expected_predictions)
test_result
set.seed(1984)
n = 20
x = runif(n)
beta_0 = 3
beta_1 = -2
h_star_x = beta_0 + beta_1*x
epsilon = rnorm(n, mean = 9, sd = .33)
y = h_star_x + epsilon
pacman::p_load(ggplot2)
simple_df = data.frame(x = x, y = y)
simple_viz_obj = ggplot(simple_df, aes(x, y)) +
geom_point(size = 2)
simple_viz_obj
my_simple_ols = function(x, y){
ols_obj = list()
if (class(x) != "numeric"){
stop("x input is not numeric")
}
if (class(y) != "numeric"){
stop("y input is not numeric")
}
n = length(x)
if (length(y) != n){
stop("x and y are not the same length")
}
x_bar = mean(x)
y_bar = mean(y)
b_1 = (sum(x*y) - n*x_bar*y_bar)/(sum(x^2)-n*(x_bar)^2)
b_0 = y_bar - b_1*x_bar
e = y - (b_0 + b_1*x)
SSE = sum(e^2)
MSE = SSE/(n-2)
RMSE = sqrt(MSE)
SST = sum((y - y_bar)^2)
Rsq = (SST - SSE)/SST
class(ols_obj) = "my_simple_ols_obj"
ols_obj$b_1 = b_1
ols_obj$b_0 = b_0
ols_obj$e = e
ols_obj$SSE = SSE
ols_obj$MSE = MSE
ols_obj$RMSE = RMSE
ols_obj$SST = SST
ols_obj$Rsq = Rsq
ols_obj
}
lm_mod = lm(y ~ x)
my_simple_ols_mod = my_simple_ols(x, y)
#run the tests to ensure the function is up to spec
pacman::p_load(testthat)
expect_equal(my_simple_ols_mod$b_0, as.numeric(coef(lm_mod)[1]), tol = 1e-4)
expect_equal(my_simple_ols_mod$b_1, as.numeric(coef(lm_mod)[2]), tol = 1e-4)
expect_equal(my_simple_ols_mod$RMSE, summary(lm_mod)$sigma, tol = 1e-4)
expect_equal(my_simple_ols_mod$Rsq, summary(lm_mod)$r.squared, tol = 1e-4)
expect_equal(0, mean(my_simple_ols_mod$e), tol = 1e-4)
X = cbind(1, x)
X
X_model_matrix = model.matrix(~ x)
X_model_matrix
g = function(my_simple_ols_obj, x_star){
b_0 = my_simple_ols_obj$b_0
b_1 = my_simple_ols_obj$b_1
y_pred = b_0 + b_1 * x_star
y_pred
}
my_simple_ols_obj = my_simple_ols_mod
expect_equal(g(my_simple_ols_obj, mean(x)), mean(y))
beta_0 = 3
beta_1 = -2
beta = c(beta_0, beta_1)
ns = seq(10, 1000, by = 10)
errors = array(NA, length(ns))
for (i in 1 : length(ns)) {
n = ns[i]
x = runif(n)
h_star_x = beta_0 + beta_1 * x
epsilon = rnorm(n, mean = 0, sd = 0.33)
y = h_star_x + epsilon
lm_mod = lm(y ~ x)
b = coef(lm_mod)
errors[i] = sum((beta - b)^2)
}
errors
plot(ns, errors, type = "b", xlab = "Sample Size (n)", ylab = "Estimation Error (||b - beta||^2)")
pacman::p_load(HistData)
data(Galton)
pacman::p_load(skimr)
summary(Galton)
avg_height = mean(c(Galton$parent, Galton$child))
sd(Galton$child)
lm_mod = lm(child ~ parent, data = Galton)
coefs = coef(lm_mod)
b_0 = coefs[1]
b_1 = coefs[2]
summary(lm_mod)$sigma
summary(lm_mod)$r.square
avg_height = mean(c(Galton$parent, Galton$child))
sd(Galton$child)
lm_mod = lm(child ~ parent, data = Galton)
coefs = coef(lm_mod)
b_0 = coefs[1]
b_1 = coefs[2]
summary(lm_mod)$sigma
summary(lm_mod)$r.square
pacman::p_load(ggplot2)
ggplot(Galton, aes(x = parent, y = child)) +
geom_point() +
geom_jitter() +
geom_abline(intercept = b_0, slope = b_1, color = "blue", size = 1) +
geom_abline(intercept = 0, slope = 1, color = "red", size = 1) +
geom_abline(intercept = avg_height, slope = 0, color = "darkgreen", size = 1) +
xlim(63.5, 72.5) +
ylim(63.5, 72.5) +
coord_equal(ratio = 1)
rm(list = ls())
n = 10000
x = runif(n)
beta_0 = 0.5
beta_1 = 1.5
h_star_x = beta_0 + beta_1 * x
epsilon = rnorm(n, mean = 0, sd = 0.43)
y = h_star_x + epsilon
Xy = data.frame(x = x, y = y)
lm_mod = lm(y ~ x, data = Xy)
my_simple_ols_mod = my_simple_ols(x, y)
